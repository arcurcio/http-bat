"use strict";
exports.PointerType = require('./Pointer');
exports.Parser = require('yaml-ast-parser');
exports.ASTParser = require('yaml-ast-parser');
var SAFE_SCHEMA = require('yaml-ast-parser/dist/schema/default_safe');
var Schema = require('yaml-ast-parser/dist/schema');
var schema = new Schema({
    include: [
        SAFE_SCHEMA
    ],
    explicit: [
        exports.PointerType.type
    ]
});
function walkFindingErrors(node, errors) {
    if (node.errors && node.errors.length) {
        node.errors.forEach(function (err) { return errors.push(err); });
    }
    if (typeof node.value == "object" && node.value.errors && 'value' in node.value) {
        walkFindingErrors(node.value, errors);
    }
}
function load(content) {
    var errors = [];
    var parsed = exports.Parser.load(content, {
        schema: schema
    });
    walkFindingErrors(parsed, errors);
    if (errors.length) {
        // errors.forEach(err => console.error(err));
        throw errors[0];
    }
    return parsed;
}
exports.load = load;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiWUFNTC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIllBTUwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFjLG1CQUFXLFdBQVcsV0FBVyxDQUFDLENBQUM7QUFDbkMsY0FBTSxXQUFXLGlCQUFpQixDQUFDLENBQUM7QUFFcEMsaUJBQVMsV0FBVyxpQkFBaUIsQ0FBQyxDQUFDO0FBRXJELElBQU8sV0FBVyxXQUFXLDBDQUEwQyxDQUFDLENBQUM7QUFDekUsSUFBTyxNQUFNLFdBQVcsNkJBQTZCLENBQUMsQ0FBQztBQUV2RCxJQUFJLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQztJQUN0QixPQUFPLEVBQUU7UUFDUCxXQUFXO0tBQ1o7SUFDRCxRQUFRLEVBQUU7UUFDUixtQkFBVyxDQUFDLElBQUk7S0FDakI7Q0FDRixDQUFDLENBQUM7QUFFSCwyQkFBMkIsSUFBd0IsRUFBRSxNQUF5QjtJQUM1RSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUN0QyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFBLEdBQUcsSUFBSSxPQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQWhCLENBQWdCLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQsRUFBRSxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsS0FBSyxJQUFJLFFBQVEsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxPQUFPLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDaEYsaUJBQWlCLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN4QyxDQUFDO0FBQ0gsQ0FBQztBQUVELGNBQXFCLE9BQWU7SUFDbEMsSUFBSSxNQUFNLEdBQXNCLEVBQUUsQ0FBQztJQUVuQyxJQUFJLE1BQU0sR0FBRyxjQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtRQUNoQyxNQUFNLEVBQUUsTUFBTTtLQUNmLENBQUMsQ0FBQztJQUVILGlCQUFpQixDQUFDLE1BQWEsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUV6QyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNsQiw2Q0FBNkM7UUFDN0MsTUFBTSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQWZlLFlBQUksT0FlbkIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbXBvcnQgUG9pbnRlclR5cGUgPSByZXF1aXJlKCcuL1BvaW50ZXInKTtcbmV4cG9ydCBpbXBvcnQgUGFyc2VyID0gcmVxdWlyZSgneWFtbC1hc3QtcGFyc2VyJyk7XG5cbmV4cG9ydCBpbXBvcnQgQVNUUGFyc2VyID0gcmVxdWlyZSgneWFtbC1hc3QtcGFyc2VyJyk7XG5cbmltcG9ydCBTQUZFX1NDSEVNQSA9IHJlcXVpcmUoJ3lhbWwtYXN0LXBhcnNlci9kaXN0L3NjaGVtYS9kZWZhdWx0X3NhZmUnKTtcbmltcG9ydCBTY2hlbWEgPSByZXF1aXJlKCd5YW1sLWFzdC1wYXJzZXIvZGlzdC9zY2hlbWEnKTtcblxubGV0IHNjaGVtYSA9IG5ldyBTY2hlbWEoe1xuICBpbmNsdWRlOiBbXG4gICAgU0FGRV9TQ0hFTUFcbiAgXSxcbiAgZXhwbGljaXQ6IFtcbiAgICBQb2ludGVyVHlwZS50eXBlXG4gIF1cbn0pO1xuXG5mdW5jdGlvbiB3YWxrRmluZGluZ0Vycm9ycyhub2RlOiBBU1RQYXJzZXIuWUFNTE5vZGUsIGVycm9yczogQVNUUGFyc2VyLkVycm9yW10pIHtcbiAgaWYgKG5vZGUuZXJyb3JzICYmIG5vZGUuZXJyb3JzLmxlbmd0aCkge1xuICAgIG5vZGUuZXJyb3JzLmZvckVhY2goZXJyID0+IGVycm9ycy5wdXNoKGVycikpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBub2RlLnZhbHVlID09IFwib2JqZWN0XCIgJiYgbm9kZS52YWx1ZS5lcnJvcnMgJiYgJ3ZhbHVlJyBpbiBub2RlLnZhbHVlKSB7XG4gICAgd2Fsa0ZpbmRpbmdFcnJvcnMobm9kZS52YWx1ZSwgZXJyb3JzKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9hZChjb250ZW50OiBzdHJpbmcpIHtcbiAgbGV0IGVycm9yczogQVNUUGFyc2VyLkVycm9yW10gPSBbXTtcblxuICBsZXQgcGFyc2VkID0gUGFyc2VyLmxvYWQoY29udGVudCwge1xuICAgIHNjaGVtYTogc2NoZW1hXG4gIH0pO1xuXG4gIHdhbGtGaW5kaW5nRXJyb3JzKHBhcnNlZCBhcyBhbnksIGVycm9ycyk7XG5cbiAgaWYgKGVycm9ycy5sZW5ndGgpIHtcbiAgICAvLyBlcnJvcnMuZm9yRWFjaChlcnIgPT4gY29uc29sZS5lcnJvcihlcnIpKTtcbiAgICB0aHJvdyBlcnJvcnNbMF07XG4gIH1cblxuICByZXR1cm4gcGFyc2VkO1xufSJdfQ==