"use strict";
// NODE
var util_1 = require('util');
var url = require('url');
var path = require('path');
// LOCAL
var ATLHelpers_1 = require('./ATLHelpers');
var Pointer_1 = require('./Pointer');
var ATLRequest = (function () {
    function ATLRequest(test) {
        this.test = test;
        this.flatPromise = ATLHelpers_1.flatPromise();
        this.promise = this.flatPromise.promise;
    }
    ATLRequest.prototype.run = function () {
        try {
            this._run();
        }
        catch (e) {
            this.flatPromise.rejecter(e);
        }
        return this.promise;
    };
    ATLRequest.prototype._run = function () {
        var _this = this;
        this.urlObject = url.parse(this.test.uri, true);
        this.urlObject.query = this.urlObject.query || {};
        if (this.test.request.queryParameters) {
            if ('search' in this.urlObject)
                delete this.urlObject.search;
            var qsParams = ATLHelpers_1.cloneObjectUsingPointers(this.test.request.queryParameters, this.test.suite.ATL.options.variables);
            for (var i in qsParams) {
                var typeOfValue = typeof qsParams[i];
                if (typeOfValue == 'undefined')
                    continue;
                if (typeOfValue != 'string' && typeOfValue != 'number') {
                    throw new Error("Only strings and numbers are allowed on queryParameters. " + i + "=" + util_1.inspect(qsParams[i]));
                }
                this.urlObject.query[i] = qsParams[i];
            }
        }
        var _loop_1 = function(i) {
            var value = null;
            if (this_1.test.uriParameters[i] instanceof Pointer_1.Pointer) {
                value = this_1.test.uriParameters[i].get(this_1.test.suite.ATL.options.variables);
            }
            else {
                value = this_1.test.uriParameters[i];
            }
            var typeOfValue = typeof value;
            if (typeOfValue != 'string' && typeOfValue != 'number') {
                throw new Error("Only strings and numbers are allowed on uriParameters. " + i + "=" + util_1.inspect(value));
            }
            this_1.urlObject.pathname = this_1.urlObject.pathname.replace(new RegExp("{" + i + "}", "g"), function (fulltext, match) {
                return encodeURIComponent(value);
            });
        };
        var this_1 = this;
        for (var i in this.test.uriParameters) {
            _loop_1(i);
        }
        this.url = url.format(this.urlObject);
        var req = this.superAgentRequest = this.test.suite.ATL.agent[this.test.method.toLowerCase()](this.url);
        // we must send some data..
        if (this.test.request) {
            if (this.test.request.headers) {
                var headers = ATLHelpers_1.cloneObjectUsingPointers(this.test.request.headers, this.test.suite.ATL.options.variables);
                for (var h in headers) {
                    req.set(h, headers[h] == undefined ? '' : headers[h].toString());
                }
            }
            if (this.test.request.json) {
                var data = ATLHelpers_1.cloneObjectUsingPointers(this.test.request.json, this.test.suite.ATL.options.variables);
                //          requestHolder.ctx.REQUEST.body = data;
                req.send(data);
            }
            if (this.test.request.attach) {
                /* istanbul ignore if */
                if (!this.test.suite.ATL.options.path) {
                    throw new Error("attach is not allowed using RAW definitions");
                }
                for (var i in this.test.request.attach) {
                    var currentAttachment = this.test.request.attach[i];
                    req.attach(currentAttachment.key, path.resolve(this.test.suite.ATL.options.path, currentAttachment.value));
                }
            }
            if (this.test.request.form) {
                req.type('form');
                for (var i in this.test.request.form) {
                    var currentAttachment = ATLHelpers_1.cloneObjectUsingPointers(this.test.request.form[i], this.test.suite.ATL.options.variables);
                    req.field(currentAttachment.key, currentAttachment.value);
                }
            }
            if (this.test.request.urlencoded) {
                req.send(ATLHelpers_1.cloneObjectUsingPointers(this.test.request.urlencoded, this.test.suite.ATL.options.variables));
            }
        }
        req.end(function (err, res) {
            _this.superAgentResponse = res;
            if (err) {
                return _this.flatPromise.rejecter(err);
            }
            return _this.flatPromise.resolver(res);
        });
    };
    ATLRequest.prototype.dependencyFailed = function () {
        this.flatPromise.rejecter(new Error('Dependency failed, skipping request.'));
    };
    return ATLRequest;
}());
exports.ATLRequest = ATLRequest;
//# sourceMappingURL=data:application/json;base64,