"use strict";
// Node
var fs = require('fs');
var path = require('path');
// NPM
var jsYaml = require('js-yaml');
var _ = require('lodash');
var request = require('supertest');
var pathMatch = require('raml-path-match');
// Locals
var ATL = require('./ATL');
var ATLHelpers = require('./ATLHelpers');
var Coverage = require('./Coverage');
var RAMLCoverageReporter_1 = require('../lib/RAMLCoverageReporter');
var Bat = (function () {
    function Bat(options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        this.options = options;
        this.coverageElements = [];
        this.coverageData = {};
        this.ast = new ATL.ATL();
        var gotAST = ATLHelpers.flatPromise();
        this.loaderSemaphore = gotAST.promise;
        this._loaded = gotAST.resolver;
        this._loadedFailed = gotAST.rejecter;
        if (options.raw) {
            this.raw(options.raw);
        }
        else if (this.options.file) {
            this.load(options.file);
        }
        else {
            this.checkMochaContext()
                .then(function () { return _this.run(); });
        }
    }
    Bat.prototype.checkMochaContext = function () {
        var _this = this;
        var gotContext = ATLHelpers.flatPromise();
        describe('Checking mocha context', function () {
            gotContext.resolver(this.ctx);
        });
        // check for context configurations
        return gotContext.promise.then(function (ctx) {
            if (ctx) {
                ctx = ctx.config || ctx;
                if (ctx.batFile) {
                    _this.load(ctx.batFile);
                }
                else if (ctx.rawBat) {
                    _this.raw(ctx.rawBat);
                }
                if (ctx.baseUri) {
                    _this.options.baseUri = ctx.baseUri;
                }
                if (ctx.variables) {
                    _this.options.variables = _this.options.variables || {};
                    _.merge(_this.options.variables, ctx.variables);
                }
            }
        });
    };
    Bat.prototype.updateState = function () {
        if (this.options.variables) {
            _.merge(this.ast.options.variables, this.options.variables);
        }
        if (this.options.baseUri && this.options.baseUri != 'default') {
            this.ast.options.baseUri = this.options.baseUri;
        }
    };
    Bat.prototype.load = function (file) {
        this.path = path.dirname(file);
        process.chdir(this.path);
        this.file = file;
        this.raw(fs.readFileSync(this.file, 'utf8'));
    };
    Bat.prototype.raw = function (content) {
        try {
            var parsed = jsYaml.load(content, {
                schema: ATLHelpers.pointerLib.createSchema()
            });
            this.ast.options.path = this.path;
            this.ast.fromObject(parsed);
            this.updateState();
            this._loaded();
            // Parse the raml for coverage
            if (this.ast.raml) {
                var resources = this.ast.raml.resources();
                for (var r in resources) {
                    this.peekResource(resources[r]);
                }
            }
        }
        catch (e) {
            if (this.options.file)
                e.message = this.options.file + '\n' + e.message;
            throw e;
        }
    };
    Bat.prototype.run = function (app) {
        var _this = this;
        var prom = ATLHelpers.flatPromise();
        try {
            if (this.ast.options.selfSignedCert) {
                process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
            }
            if (this.options.baseUri == 'default')
                delete this.options.baseUri;
            if (!app || app === "default" || app === '') {
                app = this.options.baseUri || this.ast.options.baseUri;
            }
            if (!app) {
                throw new Error("baseUri not specified");
            }
            if (typeof app === 'string' && app.substr(-1) === '/') {
                app = app.substr(0, app.length - 1);
            }
            this.ast.agent = request.agent(app);
            // Run tests
            var tests = this.allTests();
            var allDone_1 = [];
            tests.forEach(function (test) {
                var testResult = test.run();
                allDone_1.push(testResult
                    .then(function (result) { return Promise.resolve({
                    response: result,
                    success: true
                }); })
                    .catch(function (result) { return Promise.resolve({
                    response: result,
                    success: false
                }); }));
                testResult.then(function (res) {
                    _this.registerTestResult(test, {
                        req: test.requester.superAgentRequest,
                        res: test.requester.superAgentResponse,
                        test: test,
                        url: test.requester.url
                    });
                });
            });
            Promise.all(allDone_1).then(function () { return prom.resolver(); });
        }
        catch (e) {
            prom.rejecter(e);
        }
        return prom.promise;
    };
    Bat.prototype.peekResource = function (resource, parent) {
        var thisUrl = (parent || "") + resource.relativeUri().value();
        this.coverageElements.push(new Coverage.CoverageResource(resource, this));
        var resources = resource.resources();
        for (var r in resources) {
            this.peekResource(resources[r], thisUrl);
        }
    };
    Bat.prototype.registerTestResult = function (test, ctx) {
        var key = ATLHelpers.matchUrl(test.uri);
        this.coverageElements.forEach(function (coverageElement) {
            if (coverageElement.matches(ctx.url)) {
                coverageElement.resolve(ctx.test, ctx.res);
            }
        });
    };
    Bat.prototype.allTests = function () {
        var tests = [];
        var walk = function (suite) {
            if (suite.test)
                tests.push(suite.test);
            if (suite.suites && Object.keys(suite.suites).length) {
                for (var k in suite.suites)
                    walk(suite.suites[k]);
            }
        };
        for (var suite_1 in this.ast.suites)
            walk(this.ast.suites[suite_1]);
        return tests;
    };
    Bat.prototype.writeCoverage = function (coverFile) {
        var _this = this;
        var cwd = path.dirname(coverFile);
        if (this.coverageData && Object.keys(this.coverageData).length) {
            console.info("Writing coverage information: " + coverFile);
            var coverage = '';
            try {
                fs.mkdirSync(cwd);
            }
            catch (e) { }
            try {
                coverage = fs.readFileSync(coverFile).toString();
            }
            catch (e) {
            }
            if (coverage.length)
                coverage = coverage + '\n';
            coverage =
                coverage += Object.keys(this.coverageData)
                    .filter(function (x) { return !!x; })
                    .map(function (file) {
                    return RAMLCoverageReporter_1.generateString(file, _this.coverageData[file]);
                }).join('\n');
            fs.writeFileSync(coverFile, coverage);
            console.info("Writing coverage information. OK!");
        }
    };
    return Bat;
}());
exports.Bat = Bat;
//# sourceMappingURL=data:application/json;base64,