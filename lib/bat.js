"use strict";
// Node
var fs = require('fs');
var path = require('path');
var util = require('util');
// NPM
var jsYaml = require('js-yaml');
var _ = require('lodash');
var request = require('supertest');
var jsonschema = require('jsonschema');
var pathMatch = require('raml-path-match');
// Locals
var ATL = require('./ATL');
var ATLHelpers = require('./ATLHelpers');
var Coverage = require('./Coverage');
var RAMLCoverageReporter_1 = require('../lib/RAMLCoverageReporter');
var Bat = (function () {
    function Bat(options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        this.options = options;
        this.describe = describe;
        this.it = it;
        this.coverageElements = [];
        this.coverageData = {};
        this.ast = new ATL.ATL();
        var gotAST = ATLHelpers.flatPromise();
        this.loaderSemaphore = gotAST.promise;
        this._loaded = gotAST.resolver;
        this._loadedFailed = gotAST.rejecter;
        if (options.raw) {
            this.raw(options.raw);
        }
        else if (this.options.file) {
            this.load(options.file);
        }
        else {
            this.checkMochaContext()
                .then(function () { return _this.run(); });
        }
    }
    Bat.prototype.checkMochaContext = function () {
        var _this = this;
        var gotContext = ATLHelpers.flatPromise();
        this.describe('Checking mocha context', function () {
            gotContext.resolver(this.ctx);
        });
        // check for context configurations
        return gotContext.promise.then(function (ctx) {
            if (ctx) {
                ctx = ctx.config || ctx;
                if (ctx.batFile) {
                    _this.load(ctx.batFile);
                }
                else if (ctx.rawBat) {
                    _this.raw(ctx.rawBat);
                }
                if (ctx.baseUri) {
                    _this.options.baseUri = ctx.baseUri;
                }
                if (ctx.variables) {
                    _this.options.variables = _this.options.variables || {};
                    _.merge(_this.options.variables, ctx.variables);
                }
            }
        });
    };
    Bat.prototype.updateState = function () {
        if (this.options.variables) {
            _.merge(this.ast.options.variables, this.options.variables);
        }
        if (this.options.baseUri && this.options.baseUri != 'default') {
            this.ast.options.baseUri = this.options.baseUri;
        }
    };
    Bat.prototype.load = function (file) {
        this.path = path.dirname(file);
        process.chdir(this.path);
        this.file = file;
        this.raw(fs.readFileSync(this.file, 'utf8'));
    };
    Bat.prototype.raw = function (content) {
        try {
            var parsed = jsYaml.load(content, {
                schema: ATLHelpers.pointerLib.createSchema()
            });
            this.ast.options.path = this.path;
            this.ast.fromObject(parsed);
            this.updateState();
            this._loaded();
        }
        catch (e) {
            if (this.options.file)
                e.message = this.options.file + '\n' + e.message;
            throw e;
        }
    };
    Bat.prototype.run = function (app) {
        var _this = this;
        var prom = ATLHelpers.flatPromise();
        this.describe(this.file || 'http-bat', function () {
            if (_this.ast.options.selfSignedCert) {
                _this.it('Allowing self signed server certificates', function (done) {
                    process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
                    done();
                });
            }
            if (_this.options.baseUri == 'default')
                delete _this.options.baseUri;
            if (!app || app === "default" || app === '') {
                app = _this.options.baseUri || _this.ast.options.baseUri;
            }
            if (!app) {
                throw new Error("baseUri not specified");
            }
            if (typeof app === 'string' && app.substr(-1) === '/') {
                app = app.substr(0, app.length - 1);
            }
            _this.ast.agent = request.agent(app);
            // Parse the raml for coverage
            if (_this.ast.raml) {
                var resources = _this.ast.raml.resources();
                for (var r in resources) {
                    _this.peekResource(resources[r]);
                }
            }
            // Run suites
            for (var k in _this.ast.suites) {
                var suite_1 = _this.ast.suites[k];
                _this.runSuite(suite_1);
            }
            _this.ensureRamlCoverage();
            _this.deferedIt('Finalize ATL Document').then(function (done) {
                prom.resolver();
                done();
            });
        });
        return prom.promise;
    };
    Bat.prototype.ensureRamlCoverage = function () {
        var _this = this;
        if (this.ast.raml) {
            this.describe("RAML Coverage", function () {
                _this.it('Wait the results before start', function (done) {
                    Promise.all(_this.coverageElements.map(function (item) { return item.run(); }))
                        .then(function () { return done(); })
                        .catch(function (err) { return done(err); });
                });
                if (_this.ast.options.raml.coverage) {
                    _this.coverageElements.forEach(function (x) { return x.injectMochaTests(); });
                }
                it('Print coverage', function (done) {
                    Promise.all(_this.coverageElements.map(function (x) { return x.getCoverage(); }))
                        .then(function (x) {
                        var total = x.reduce(function (prev, actual) {
                            prev.errored += actual.errored;
                            prev.total += actual.total;
                            prev.notCovered += actual.notCovered;
                            return prev;
                        }, { total: 0, errored: 0, notCovered: 0 });
                        console.log(util.inspect(total, false, 2, true));
                        done();
                    });
                });
            });
        }
    };
    Bat.prototype.peekResource = function (resource, parent) {
        var thisUrl = (parent || "") + resource.relativeUri().value();
        this.coverageElements.push(new Coverage.CoverageResource(resource, this));
        var resources = resource.resources();
        for (var r in resources) {
            this.peekResource(resources[r], thisUrl);
        }
    };
    Bat.prototype.registerTestResult = function (test, ctx) {
        var key = ATLHelpers.matchUrl(test.uri);
        this.coverageElements.forEach(function (coverageElement) {
            if (coverageElement.matches(ctx.url)) {
                coverageElement.resolve(ctx.test, ctx.res);
            }
        });
    };
    Bat.prototype.runSuite = function (suite) {
        var _this = this;
        var execFn = suite.skip ? this.describe.skip : this.describe;
        var promises = [];
        if (suite.test) {
            // this.runTest(suite.test);
            var testResult = suite.test.run();
            promises.push(testResult);
            testResult.then(function (res) {
                _this.registerTestResult(suite.test, {
                    req: suite.test.requester.superAgentRequest,
                    res: suite.test.requester.superAgentResponse,
                    test: suite.test,
                    url: suite.test.requester.url
                });
            });
            generateMochaTest(suite.test);
        }
        var that = this;
        if (suite.suites && Object.keys(suite.suites).length) {
            execFn(suite.name, function () {
                for (var k in suite.suites) {
                    var s = suite.suites[k];
                    promises = promises.concat(that.runSuite(s));
                }
            });
        }
        return Promise.all(promises);
    };
    Bat.prototype.obtainSchemaValidator = function (schema) {
        var v = new jsonschema.Validator();
        if (typeof schema == "string") {
            if (schema in this.ast.schemas) {
                v.addSchema(this.ast.schemas[schema], schema);
                schema = this.ast.schemas[schema];
            }
            else {
                try {
                    schema = JSON.parse(schema);
                    v.addSchema(schema);
                }
                catch (e) {
                }
            }
        }
        else if (typeof schema == "object") {
            v.addSchema(schema);
        }
        else {
            throw new Error('Invalid schema ' + util.inspect(schema));
        }
        if (v.unresolvedRefs && v.unresolvedRefs.length) {
            this.describe("Load referenced schemas", function () {
                var _this = this;
                var _loop_1 = function() {
                    var nextSchema = v.unresolvedRefs.shift();
                    this_1.it("load schema " + nextSchema, function () {
                        var theSchema = _this.ast.schemas[nextSchema];
                        if (!theSchema)
                            throw new Error("schema " + nextSchema + " not found");
                        v.addSchema(theSchema, nextSchema);
                    });
                };
                var this_1 = this;
                while (v.unresolvedRefs && v.unresolvedRefs.length) {
                    _loop_1();
                }
            });
        }
        return function (content) {
            return v.validate(content, schema);
        };
    };
    Bat.prototype.deferedIt = function (name, timeout) {
        var fill = null;
        var prom = ATLHelpers.flatPromise();
        this.it(name, function (done) {
            if (timeout)
                this.timeout(timeout);
            prom.resolver.call(this, function (ret) {
                /* istanbul ignore if */
                if (ret) {
                    if (done.fail)
                        done.fail(ret);
                    else
                        done(ret);
                }
                else {
                    done();
                }
            });
            prom.promise.catch(done);
        });
        return prom.promise;
    };
    Bat.prototype.writeCoverage = function (coverFile) {
        var _this = this;
        var cwd = path.dirname(coverFile);
        if (this.coverageData && Object.keys(this.coverageData).length) {
            console.info("Writing coverage information: " + coverFile);
            var coverage = '';
            try {
                fs.mkdirSync(cwd);
            }
            catch (e) { }
            try {
                coverage = fs.readFileSync(coverFile).toString();
            }
            catch (e) {
            }
            if (coverage.length)
                coverage = coverage + '\n';
            coverage =
                coverage += Object.keys(this.coverageData)
                    .filter(function (x) { return !!x; })
                    .map(function (file) {
                    return RAMLCoverageReporter_1.generateString(file, _this.coverageData[file]);
                }).join('\n');
            fs.writeFileSync(coverFile, coverage);
            console.info("Writing coverage information. OK!");
        }
    };
    return Bat;
}());
exports.Bat = Bat;
function generateMochaTest(test) {
    var execFn = test.skip
        ? describe.skip
        : describe;
    execFn(test.description || (test.method.toUpperCase() + ' ' + test.uri), function () {
        it(test.method.toUpperCase() + ' ' + test.uri, function (done) {
            test
                .requester
                .promise
                .then(function (response) {
                done();
            })
                .catch(function (err) {
                console.error(util.inspect(err));
                done(err);
            });
        });
        test.assertions.forEach(function (x) {
            it(x.name, function (done) {
                x.promise
                    .then(function (err) {
                    if (err) {
                        console.error(util.inspect(err));
                        done(err);
                    }
                    else
                        done();
                })
                    .catch(function (err) {
                    console.error(util.inspect(err));
                    done(err);
                });
            });
        });
    });
}
//# sourceMappingURL=data:application/json;base64,