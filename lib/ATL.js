"use strict";
var util = require('util');
var ATLHelpers = require('./ATLHelpers');
var _ = require('lodash');
var RAML = require('raml-1-parser');
var path = require('path');
if (typeof Promise != 'function')
    require('es6-promise').polyfill();
var ATL = (function () {
    function ATL() {
        this.options = {
            variables: {},
            path: null,
            file: null,
            selfSignedCert: false,
            raml: {
                coverage: true,
                resourceTypes: true,
                traits: true
            }
        };
        this.suites = {};
        this.schemas = {};
    }
    ATL.prototype.fromObject = function (object) {
        var _this = this;
        if (typeof object !== "object")
            throw new TypeError("fromObject: the first parameter must be an object");
        // merge the variables
        if ('variables' in object) {
            if (typeof object.variables != "object")
                throw new TypeError("fromObject.variables: MUST be an object");
            this.options.variables = _.merge(this.options.variables || {}, object.variables);
        }
        else {
            this.options.variables = this.options.variables || {};
        }
        // override variables.ENV if not exists or is an object
        if (!this.options.variables['ENV'] || typeof this.options.variables['ENV'] != "object")
            this.options.variables['ENV'] = {};
        _.extend(this.options.variables['ENV'], _.cloneDeep(process.env));
        // prepare the baseUri
        if ('baseUri' in object) {
            if (typeof object.baseUri == "string")
                this.options.baseUri = object.baseUri;
            else
                throw new TypeError("baseUri: invalid type");
            if (this.options.baseUri.substr(-1) === '/') {
                this.options.baseUri = this.options.baseUri.substr(0, this.options.baseUri.length - 1);
            }
        }
        if ('options' in object) {
            ATLHelpers.ensureInstanceOf("options", object.options, Object);
            Object.keys(object.options).forEach(function (key) {
                var value = object.options[key];
                switch (key) {
                    case 'selfSignedCert':
                        ATLHelpers.ensureInstanceOf("options.selfSignedCert", value, Boolean);
                        _this.options.selfSignedCert = !!value;
                        break;
                    case 'raml':
                        ATLHelpers.ensureInstanceOf("options.raml", value, Object);
                        _.merge(_this.options.raml, value);
                        break;
                    default:
                        throw new TypeError("unknown option:" + key);
                }
            });
        }
        if ('baseUriParameters' in object) {
            if (!object.baseUriParameters || typeof object.baseUriParameters != "object" || object.baseUriParameters instanceof Array)
                throw new TypeError("baseUriParameters: MUST be a dictionary");
            this.options.baseUriParameters = _.cloneDeep(object.baseUriParameters);
        }
        // parse the tests
        if ('tests' in object) {
            if (!object.tests || typeof object.tests != "object" || object.tests instanceof Array) {
                throw new TypeError("tests: MUST be a dictionary");
            }
            var suite_1 = null;
            for (var sequenceName in object.tests) {
                suite_1 = ATLHelpers.parseSuites(object.tests[sequenceName], this);
                suite_1.name = sequenceName;
                this.suites[suite_1.name] = suite_1;
            }
        }
        if ('schemas' in object) {
            if (!object.schemas || !(object.schemas instanceof Array)) {
                throw new TypeError("schemas: MUST be a list");
            }
            for (var sequenceName in object.schemas) {
                var schemaName = null;
                if (typeof object.schemas[sequenceName] == "string") {
                    // load string schema by path
                    // TODO, load schema
                    this._addSchema(sequenceName, {});
                }
                else if (typeof object.schemas[sequenceName] == "object") {
                    this._addSchema(schemaName, object.schemas[sequenceName]);
                }
                else {
                    throw new TypeError("schemas: invalid schema " + sequenceName);
                }
            }
        }
        if ('raml' in object) {
            if (!object.raml || typeof object.raml != "string") {
                throw new TypeError("raml: MUST be a string");
            }
            try {
                this.raml = RAML.loadApiSync(object.raml, { rejectOnErrors: true });
            }
            catch (e) {
                if (e.parserErrors) {
                    throw path.resolve(object.raml) + ':\n' + e.message + "\n" + e.parserErrors.map(function (x) { return "  " + x.message + " line " + x.line; }).join("\n");
                }
                else {
                    console.log(util.inspect(e));
                }
                throw e;
            }
            var schemas = this.raml.schemas();
            for (var i in schemas) {
                var schemaList = schemas[i].toJSON();
                for (var schemaName in schemaList) {
                    var json = null;
                    try {
                        json = JSON.parse(schemaList[schemaName]);
                        this._addSchema(schemaName, json);
                    }
                    catch (e) {
                        e.message = 'Error parsing JSON schema ' + schemaName + '\n\t' + e.message + '\n' + util.inspect(schemaList[schemaName]);
                        throw e;
                    }
                }
            }
        }
        for (var suiteKey in this.suites) {
            this.replaceSchema(this.suites[suiteKey]);
        }
    };
    ATL.prototype.replaceSchema = function (suite) {
        if (suite.test && suite.test.response.body && suite.test.response.body.schema) {
            if (typeof suite.test.response.body.schema == "string") {
                if (suite.test.response.body.schema in this.schemas) {
                    suite.test.response.body.schema = this.schemas[suite.test.response.body.schema];
                }
                else {
                    throw new Error('schema ' + suite.test.response.body.schema + ' not found on test ' + suite.test.method + ' ' + suite.test.uri);
                }
            }
        }
        if (suite.suites) {
            for (var suiteKey in suite.suites) {
                this.replaceSchema(suite.suites[suiteKey]);
            }
        }
    };
    ATL.prototype._addSchema = function (schemaName, schema) {
        if (schemaName in this.schemas)
            throw new TypeError("schemas: duplicated schema " + schemaName);
        // VALIDATE SCHEMA
        this.schemas[schemaName] = schema;
    };
    return ATL;
}());
exports.ATL = ATL;
//# sourceMappingURL=data:application/json;base64,